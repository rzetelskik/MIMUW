-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module Grammar.Par
  ( happyError
  , myLexer
  , pProgram
  ) where

import Prelude

import qualified Grammar.Abs
import Grammar.Lex

}

%name pProgram_internal Program
-- no lexer declaration
%monad { Err } { (>>=) } { return }
%tokentype {Token}
%token
  '!' { PT _ (TS _ 1) }
  '!=' { PT _ (TS _ 2) }
  '%' { PT _ (TS _ 3) }
  '&' { PT _ (TS _ 4) }
  '&&' { PT _ (TS _ 5) }
  '(' { PT _ (TS _ 6) }
  ')' { PT _ (TS _ 7) }
  '*' { PT _ (TS _ 8) }
  '+' { PT _ (TS _ 9) }
  '++' { PT _ (TS _ 10) }
  ',' { PT _ (TS _ 11) }
  '-' { PT _ (TS _ 12) }
  '--' { PT _ (TS _ 13) }
  '/' { PT _ (TS _ 14) }
  ';' { PT _ (TS _ 15) }
  '<' { PT _ (TS _ 16) }
  '<=' { PT _ (TS _ 17) }
  '=' { PT _ (TS _ 18) }
  '==' { PT _ (TS _ 19) }
  '>' { PT _ (TS _ 20) }
  '>=' { PT _ (TS _ 21) }
  'bool' { PT _ (TS _ 22) }
  'else' { PT _ (TS _ 23) }
  'false' { PT _ (TS _ 24) }
  'for' { PT _ (TS _ 25) }
  'func' { PT _ (TS _ 26) }
  'if' { PT _ (TS _ 27) }
  'int' { PT _ (TS _ 28) }
  'nil' { PT _ (TS _ 29) }
  'print' { PT _ (TS _ 30) }
  'return' { PT _ (TS _ 31) }
  'string' { PT _ (TS _ 32) }
  'true' { PT _ (TS _ 33) }
  'var' { PT _ (TS _ 34) }
  '{' { PT _ (TS _ 35) }
  '||' { PT _ (TS _ 36) }
  '}' { PT _ (TS _ 37) }
  L_Ident  { PT _ (TV _) }
  L_integ  { PT _ (TI _) }
  L_quoted { PT _ (TL _) }

%%

Ident :: { (Grammar.Abs.BNFC'Position, Grammar.Abs.Ident) }
Ident  : L_Ident { (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1), Grammar.Abs.Ident (tokenText $1)) }

Integer :: { (Grammar.Abs.BNFC'Position, Integer) }
Integer  : L_integ  { (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1), (read (tokenText $1)) :: Integer) }

String  :: { (Grammar.Abs.BNFC'Position, String) }
String   : L_quoted { (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1), ((\(PT _ (TL s)) -> s) $1)) }

Program :: { (Grammar.Abs.BNFC'Position, Grammar.Abs.Program) }
Program : ListTopDef { (fst $1, Grammar.Abs.Prog (fst $1) (snd $1)) }

TopDef :: { (Grammar.Abs.BNFC'Position, Grammar.Abs.TopDef) }
TopDef : 'func' Ident '(' ListArg ')' Type Block { (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1), Grammar.Abs.FuncDefT (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $4) (snd $6) (snd $7)) }
       | 'func' Ident '(' ListArg ')' Block { (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1), Grammar.Abs.FuncDef (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $4) (snd $6)) }
       | Decl { (fst $1, Grammar.Abs.GlobalDcl (fst $1) (snd $1)) }

ListTopDef :: { (Grammar.Abs.BNFC'Position, [Grammar.Abs.TopDef]) }
ListTopDef : TopDef { (fst $1, (:[]) (snd $1)) }
           | TopDef ListTopDef { (fst $1, (:) (snd $1) (snd $2)) }

Arg :: { (Grammar.Abs.BNFC'Position, Grammar.Abs.Arg) }
Arg : ListIdent Type { (fst $1, Grammar.Abs.Ar (fst $1) (snd $1) (snd $2)) }

ListIdent :: { (Grammar.Abs.BNFC'Position, [Grammar.Abs.Ident]) }
ListIdent : Ident { (fst $1, (:[]) (snd $1)) }
          | Ident ',' ListIdent { (fst $1, (:) (snd $1) (snd $3)) }

ListArg :: { (Grammar.Abs.BNFC'Position, [Grammar.Abs.Arg]) }
ListArg : {- empty -} { (Grammar.Abs.BNFC'NoPosition, []) }
        | Arg { (fst $1, (:[]) (snd $1)) }
        | Arg ',' ListArg { (fst $1, (:) (snd $1) (snd $3)) }

Block :: { (Grammar.Abs.BNFC'Position, Grammar.Abs.Block) }
Block : '{' ListStmt '}' { (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1), Grammar.Abs.Blk (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1)) (snd $2)) }

ListStmt :: { (Grammar.Abs.BNFC'Position, [Grammar.Abs.Stmt]) }
ListStmt : {- empty -} { (Grammar.Abs.BNFC'NoPosition, []) }
         | Stmt ListStmt { (fst $1, (:) (snd $1) (snd $2)) }

Stmt :: { (Grammar.Abs.BNFC'Position, Grammar.Abs.Stmt) }
Stmt : ';' { (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1), Grammar.Abs.Empty (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1))) }
     | Block { (fst $1, Grammar.Abs.BStmt (fst $1) (snd $1)) }
     | Decl { (fst $1, Grammar.Abs.DStmt (fst $1) (snd $1)) }
     | ListExpr '=' ListExpr ';' { (fst $1, Grammar.Abs.Ass (fst $1) (snd $1) (snd $3)) }
     | 'for' Stmt Expr ';' Stmt Block { (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1), Grammar.Abs.For (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $3) (snd $5) (snd $6)) }
     | 'for' Expr Block { (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1), Grammar.Abs.ForExpr (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $3)) }
     | Ident '++' ';' { (fst $1, Grammar.Abs.Incr (fst $1) (snd $1)) }
     | Ident '--' ';' { (fst $1, Grammar.Abs.Decr (fst $1) (snd $1)) }
     | 'return' Expr ';' { (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1), Grammar.Abs.Ret (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1)) (snd $2)) }
     | 'return' ';' { (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1), Grammar.Abs.VoidRet (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1))) }
     | 'if' Expr Block { (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1), Grammar.Abs.Cond (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $3)) }
     | 'if' Expr Block 'else' Block { (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1), Grammar.Abs.CondElse (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $3) (snd $5)) }
     | 'print' '(' ListExpr ')' ';' { (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1), Grammar.Abs.Print (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1)) (snd $3)) }
     | Expr ';' { (fst $1, Grammar.Abs.SExp (fst $1) (snd $1)) }

Decl :: { (Grammar.Abs.BNFC'Position, Grammar.Abs.Decl) }
Decl : 'var' ListIdent Type ';' { (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1), Grammar.Abs.Dcl (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $3)) }
     | 'var' ListIdent '=' ListExpr ';' { (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1), Grammar.Abs.DclInit (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $4)) }
     | 'var' ListIdent Type '=' ListExpr ';' { (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1), Grammar.Abs.DclInitT (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $3) (snd $5)) }

Type :: { (Grammar.Abs.BNFC'Position, Grammar.Abs.Type) }
Type : 'int' { (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1), Grammar.Abs.Int (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1))) }
     | 'string' { (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1), Grammar.Abs.Str (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1))) }
     | 'bool' { (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1), Grammar.Abs.Bool (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1))) }
     | 'func' '(' ListType ')' Type { (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1), Grammar.Abs.FuncLitT (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1)) (snd $3) (snd $5)) }
     | 'func' '(' ListType ')' { (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1), Grammar.Abs.FuncLit (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1)) (snd $3)) }
     | '*' Type { (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1), Grammar.Abs.Ptr (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1)) (snd $2)) }

ListType :: { (Grammar.Abs.BNFC'Position, [Grammar.Abs.Type]) }
ListType : {- empty -} { (Grammar.Abs.BNFC'NoPosition, []) }
         | Type { (fst $1, (:[]) (snd $1)) }
         | Type ',' ListType { (fst $1, (:) (snd $1) (snd $3)) }

Expr8 :: { (Grammar.Abs.BNFC'Position, Grammar.Abs.Expr) }
Expr8 : Ident '(' ListExpr ')' { (fst $1, Grammar.Abs.EApp (fst $1) (snd $1) (snd $3)) }
      | '(' Expr ')' { (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1), (snd $2)) }

Expr7 :: { (Grammar.Abs.BNFC'Position, Grammar.Abs.Expr) }
Expr7 : 'func' '(' ListArg ')' Type Block { (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1), Grammar.Abs.ELitFunT (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1)) (snd $3) (snd $5) (snd $6)) }
      | 'func' '(' ListArg ')' Block { (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1), Grammar.Abs.ELitFun (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1)) (snd $3) (snd $5)) }
      | Expr8 { (fst $1, (snd $1)) }

Expr6 :: { (Grammar.Abs.BNFC'Position, Grammar.Abs.Expr) }
Expr6 : Expr7 '(' ListExpr ')' { (fst $1, Grammar.Abs.ELitFunApp (fst $1) (snd $1) (snd $3)) }
      | Ident { (fst $1, Grammar.Abs.EVar (fst $1) (snd $1)) }
      | Integer { (fst $1, Grammar.Abs.ELitInt (fst $1) (snd $1)) }
      | 'true' { (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1), Grammar.Abs.ELitTrue (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1))) }
      | 'false' { (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1), Grammar.Abs.ELitFalse (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1))) }
      | String { (fst $1, Grammar.Abs.EString (fst $1) (snd $1)) }
      | 'nil' { (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1), Grammar.Abs.ELitNil (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1))) }
      | Expr7 { (fst $1, (snd $1)) }

Expr5 :: { (Grammar.Abs.BNFC'Position, Grammar.Abs.Expr) }
Expr5 : '&' Expr6 { (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1), Grammar.Abs.Ref (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1)) (snd $2)) }
      | '*' Expr6 { (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1), Grammar.Abs.Deref (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1)) (snd $2)) }
      | '-' Expr6 { (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1), Grammar.Abs.Neg (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1)) (snd $2)) }
      | '!' Expr6 { (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1), Grammar.Abs.Not (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1)) (snd $2)) }
      | Expr6 { (fst $1, (snd $1)) }

Expr4 :: { (Grammar.Abs.BNFC'Position, Grammar.Abs.Expr) }
Expr4 : Expr4 MulOp Expr5 { (fst $1, Grammar.Abs.EMul (fst $1) (snd $1) (snd $2) (snd $3)) }
      | Expr5 { (fst $1, (snd $1)) }

Expr3 :: { (Grammar.Abs.BNFC'Position, Grammar.Abs.Expr) }
Expr3 : Expr3 AddOp Expr4 { (fst $1, Grammar.Abs.EAdd (fst $1) (snd $1) (snd $2) (snd $3)) }
      | Expr4 { (fst $1, (snd $1)) }

Expr2 :: { (Grammar.Abs.BNFC'Position, Grammar.Abs.Expr) }
Expr2 : Expr2 RelOp Expr3 { (fst $1, Grammar.Abs.ERel (fst $1) (snd $1) (snd $2) (snd $3)) }
      | Expr3 { (fst $1, (snd $1)) }

Expr1 :: { (Grammar.Abs.BNFC'Position, Grammar.Abs.Expr) }
Expr1 : Expr2 '&&' Expr1 { (fst $1, Grammar.Abs.EAnd (fst $1) (snd $1) (snd $3)) }
      | Expr2 { (fst $1, (snd $1)) }

Expr :: { (Grammar.Abs.BNFC'Position, Grammar.Abs.Expr) }
Expr : Expr1 '||' Expr { (fst $1, Grammar.Abs.EOr (fst $1) (snd $1) (snd $3)) }
     | Expr1 { (fst $1, (snd $1)) }

ListExpr :: { (Grammar.Abs.BNFC'Position, [Grammar.Abs.Expr]) }
ListExpr : {- empty -} { (Grammar.Abs.BNFC'NoPosition, []) }
         | Expr { (fst $1, (:[]) (snd $1)) }
         | Expr ',' ListExpr { (fst $1, (:) (snd $1) (snd $3)) }

AddOp :: { (Grammar.Abs.BNFC'Position, Grammar.Abs.AddOp) }
AddOp : '+' { (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1), Grammar.Abs.Plus (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1))) }
      | '-' { (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1), Grammar.Abs.Minus (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1))) }

MulOp :: { (Grammar.Abs.BNFC'Position, Grammar.Abs.MulOp) }
MulOp : '*' { (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1), Grammar.Abs.Times (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1))) }
      | '/' { (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1), Grammar.Abs.Div (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1))) }
      | '%' { (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1), Grammar.Abs.Mod (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1))) }

RelOp :: { (Grammar.Abs.BNFC'Position, Grammar.Abs.RelOp) }
RelOp : '<' { (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1), Grammar.Abs.LTH (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1))) }
      | '<=' { (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1), Grammar.Abs.LE (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1))) }
      | '>' { (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1), Grammar.Abs.GTH (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1))) }
      | '>=' { (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1), Grammar.Abs.GE (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1))) }
      | '==' { (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1), Grammar.Abs.EQU (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1))) }
      | '!=' { (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1), Grammar.Abs.NE (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1))) }
{

type Err = Either String

happyError :: [Token] -> Err a
happyError ts = Left $
  "syntax error at " ++ tokenPos ts ++
  case ts of
    []      -> []
    [Err _] -> " due to lexer error"
    t:_     -> " before `" ++ (prToken t) ++ "'"

myLexer :: String -> [Token]
myLexer = tokens

-- Entrypoints

pProgram :: [Token] -> Err Grammar.Abs.Program
pProgram = fmap snd . pProgram_internal
}

