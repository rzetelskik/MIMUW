-- Haskell module generated by the BNF converter

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module Grammar.Skel where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified Grammar.Abs

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transIdent :: Grammar.Abs.Ident -> Result
transIdent x = case x of
  Grammar.Abs.Ident string -> failure x

transProgram :: Show a => Grammar.Abs.Program' a -> Result
transProgram x = case x of
  Grammar.Abs.Prog _ topdefs -> failure x

transTopDef :: Show a => Grammar.Abs.TopDef' a -> Result
transTopDef x = case x of
  Grammar.Abs.FuncDefT _ ident args type_ block -> failure x
  Grammar.Abs.FuncDef _ ident args block -> failure x
  Grammar.Abs.GlobalDcl _ decl -> failure x

transArg :: Show a => Grammar.Abs.Arg' a -> Result
transArg x = case x of
  Grammar.Abs.Ar _ idents type_ -> failure x

transBlock :: Show a => Grammar.Abs.Block' a -> Result
transBlock x = case x of
  Grammar.Abs.Blk _ stmts -> failure x

transStmt :: Show a => Grammar.Abs.Stmt' a -> Result
transStmt x = case x of
  Grammar.Abs.Empty _ -> failure x
  Grammar.Abs.BStmt _ block -> failure x
  Grammar.Abs.DStmt _ decl -> failure x
  Grammar.Abs.Ass _ exprs1 exprs2 -> failure x
  Grammar.Abs.For _ stmt1 expr stmt2 block -> failure x
  Grammar.Abs.ForExpr _ expr block -> failure x
  Grammar.Abs.Incr _ ident -> failure x
  Grammar.Abs.Decr _ ident -> failure x
  Grammar.Abs.Ret _ expr -> failure x
  Grammar.Abs.VoidRet _ -> failure x
  Grammar.Abs.Cond _ expr block -> failure x
  Grammar.Abs.CondElse _ expr block1 block2 -> failure x
  Grammar.Abs.Print _ exprs -> failure x
  Grammar.Abs.SExp _ expr -> failure x

transDecl :: Show a => Grammar.Abs.Decl' a -> Result
transDecl x = case x of
  Grammar.Abs.Dcl _ idents type_ -> failure x
  Grammar.Abs.DclInit _ idents exprs -> failure x
  Grammar.Abs.DclInitT _ idents type_ exprs -> failure x

transType :: Show a => Grammar.Abs.Type' a -> Result
transType x = case x of
  Grammar.Abs.Int _ -> failure x
  Grammar.Abs.Str _ -> failure x
  Grammar.Abs.Bool _ -> failure x
  Grammar.Abs.FuncLitT _ types type_ -> failure x
  Grammar.Abs.FuncLit _ types -> failure x
  Grammar.Abs.Ptr _ type_ -> failure x
  Grammar.Abs.Void _ -> failure x

transExpr :: Show a => Grammar.Abs.Expr' a -> Result
transExpr x = case x of
  Grammar.Abs.EApp _ ident exprs -> failure x
  Grammar.Abs.ELitFunT _ args type_ block -> failure x
  Grammar.Abs.ELitFun _ args block -> failure x
  Grammar.Abs.ELitFunApp _ expr exprs -> failure x
  Grammar.Abs.EVar _ ident -> failure x
  Grammar.Abs.ELitInt _ integer -> failure x
  Grammar.Abs.ELitTrue _ -> failure x
  Grammar.Abs.ELitFalse _ -> failure x
  Grammar.Abs.EString _ string -> failure x
  Grammar.Abs.ELitNil _ -> failure x
  Grammar.Abs.Ref _ expr -> failure x
  Grammar.Abs.Deref _ expr -> failure x
  Grammar.Abs.Neg _ expr -> failure x
  Grammar.Abs.Not _ expr -> failure x
  Grammar.Abs.EMul _ expr1 mulop expr2 -> failure x
  Grammar.Abs.EAdd _ expr1 addop expr2 -> failure x
  Grammar.Abs.ERel _ expr1 relop expr2 -> failure x
  Grammar.Abs.EAnd _ expr1 expr2 -> failure x
  Grammar.Abs.EOr _ expr1 expr2 -> failure x

transAddOp :: Show a => Grammar.Abs.AddOp' a -> Result
transAddOp x = case x of
  Grammar.Abs.Plus _ -> failure x
  Grammar.Abs.Minus _ -> failure x

transMulOp :: Show a => Grammar.Abs.MulOp' a -> Result
transMulOp x = case x of
  Grammar.Abs.Times _ -> failure x
  Grammar.Abs.Div _ -> failure x
  Grammar.Abs.Mod _ -> failure x

transRelOp :: Show a => Grammar.Abs.RelOp' a -> Result
transRelOp x = case x of
  Grammar.Abs.LTH _ -> failure x
  Grammar.Abs.LE _ -> failure x
  Grammar.Abs.GTH _ -> failure x
  Grammar.Abs.GE _ -> failure x
  Grammar.Abs.EQU _ -> failure x
  Grammar.Abs.NE _ -> failure x
